Description: >
    resource components.

Parameters:
    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String
    EC2InstanceClass:
        Description: ec2 instance class
        Type: String
    EC2ImageId:
        Description: ec2 image arn
        Type: String

Resources:
    # An IAM Role that allows ec2 instances to use the S3 Service, and fetch the website code sample.
    UdacityS3ReadOnlyEC2:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                          Service:
                              - ec2.amazonaws.com
                      Action:
                          - "sts:AssumeRole"
            Policies:
                - PolicyName: root
                  PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                        - Effect: Allow
                          Action: 
                            - 's3:ListBucket'
                            - 's3:GetObject'
                            - 's3:HeadObject'
                            - 's3:ListObjectsV2'
                          Resource: 
                            - 'arn:aws:s3:::projectsamplecodebucket/*'
                            - 'arn:aws:s3:::projectsamplecodebucket'

    ProfileWithRolesForOurApp:
        Type: AWS::IAM::InstanceProfile
        Properties:
            Path: /
            Roles:
                - !Ref UdacityS3ReadOnlyEC2

    LBSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Allow http to our load balancer
            VpcId:
                Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0
    WebServerSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Allow http to our hosts and SSH from local only
            VpcId:
                Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                #   SourceSecurityGroupId: !Ref LBSecGroup
                  CidrIp: 0.0.0.0/0
                - IpProtocol: tcp
                  FromPort: 22
                  ToPort: 22
                  CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
                - IpProtocol: tcp
                  FromPort: 0
                  ToPort: 65535
                  CidrIp: 0.0.0.0/0
    WebAppLaunchConfig:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            UserData:
                Fn::Base64: !Sub |
                    #!/bin/bash
                    apt-get update -y
                    apt-get install apache2 awscli -y
                    systemctl start apache2.service
                    cd /var/www/html
                    echo "Udacity Demo Web Server Up and Running!" > index.html
                    aws s3 cp s3://projectsamplecodebucket . --recursive

            ImageId: !Ref EC2ImageId
            SecurityGroups:
                - Ref: WebServerSecGroup
            InstanceType: !Ref EC2InstanceClass
            IamInstanceProfile: !Ref ProfileWithRolesForOurApp
            BlockDeviceMappings:
                - DeviceName: "/dev/sdk"
                  Ebs:
                      VolumeSize: "10"
    WebAppGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            VPCZoneIdentifier:
                - Fn::ImportValue: !Sub "${EnvironmentName}-PRIV-NETS"
            LaunchConfigurationName: !Ref WebAppLaunchConfig
            MinSize: "4"
            MaxSize: "5"
            TargetGroupARNs:
              - Ref: WebAppTargetGroup
    WebAppLB:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
            Subnets:
            - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
            - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
            SecurityGroups:
            - Ref: LBSecGroup
    Listener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
            DefaultActions:
            - Type: forward
              TargetGroupArn:
                  Ref: WebAppTargetGroup
            LoadBalancerArn:
                Ref: WebAppLB
            Port: '80'
            Protocol: HTTP
    ALBListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            Actions:
            - Type: forward
              TargetGroupArn: !Ref 'WebAppTargetGroup'
            Conditions:
            - Field: path-pattern
              Values: [/]
            ListenerArn: !Ref 'Listener'
            Priority: 1
    WebAppTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            HealthCheckIntervalSeconds: 10
            HealthCheckPath: /
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 8
            HealthyThresholdCount: 2
            Port: 80
            Protocol: HTTP
            UnhealthyThresholdCount: 5
            VpcId: 
                Fn::ImportValue:
                    Fn::Sub: "${EnvironmentName}-VPCID"

Outputs:
    DBSecGrp:
        Description: A reference to the created DBScGrp
        Value: !Ref WebServerSecGroup
        Export:
            Name: !Sub ${EnvironmentName}-EC2ScGrp
    LoadBalancerUrl:
        Description: A reference to the created DBScGrp
        Value: !Join [ "/", [ http:/, !GetAtt WebAppLB.DNSName ] ]
    